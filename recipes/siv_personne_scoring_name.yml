recipes:
  siv_personne_scoring_name:
    input: 
      # dataset: deaths_fwf
      dataset: dcd_x_siv_match
      chunk: 2000
      #########################
      # scoring nom/prÃ©nom
    steps:
      - exec: 
          df['matchid_hit_score_name_exact'] = np.where(df['matchid_name_match'] == df['hit_matchid_name_match'], 1, 0)

      # pruning
      - exec: >
          df = df[df.matchid_hit_score_name_exact | (df.matchid_hit_score_date >= 0.7)]
          
      # patch 
      - exec: 
          - "df['hit_matchid_name_last_match'] = df['hit_matchid_name_last_src'].apply(lambda x: x[0])"
      - map:
          hit_matchid_name_first_match: hit_matchid_name_first_src
      - normalize:
          select: hit_matchid_name_.*_match
      - replace:
          select: hit_matchid_name_.*_match
          regex:
            - (^|\s)(le|du|de|de la|da|del|los|l)(\s): '\1\2'
      # scoring levenshtein nom <> nom
      - exec: >
          df['matchid_hit_score_name_lv_nn'] = np.where(
            df['matchid_name_last_match'] == df['hit_matchid_name_last_match'],
            1,
            df.apply(lambda row:
                          max(levenshtein_norm(row['matchid_name_last_match'],row['hit_matchid_name_last_match'][0]),
                                 0.9 * levenshtein_norm(row['matchid_name_last_match'],row['hit_matchid_name_last_match'][1]) if len(row['hit_matchid_name_last_match']) else 0
                              ),
                      axis = 1)
            )
      - exec: >
          df['matchid_hit_score_name_lv_pp'] = np.where(
            df['matchid_name_first_match'] == df['hit_matchid_name_first_match'],
            1,
            df.apply(lambda row: levenshtein_norm(row['matchid_name_first_match'],row['hit_matchid_name_first_match']), axis = 1)
            )
      # score nom x prenom
      - exec:
          df['matchid_hit_score_name_lv'] = (df.matchid_hit_score_name_lv_nn * df.matchid_hit_score_name_lv_pp).round(2)
      # cas inversion
      - exec: >
          df['matchid_hit_score_name_lv_inv'] = np.where(
            (df['matchid_hit_score_name_lv_pp'] > 0.9) & (df['matchid_hit_score_name_lv_nn'] > 0.9),
            0,
            df.apply(lambda row:
                          round(levenshtein_norm(row['matchid_name_first_match'],row['hit_matchid_name_last_match'])
                               *levenshtein_norm(row['matchid_name_last_match'],row['hit_matchid_name_first_match']),2),
                      axis = 1)
            )
      - exec: >
          df['matchid_hit_score_name_tokens'] = np.where(
            df['matchid_name_match'] == df['hit_matchid_name_match'],
            1,
            df.apply(lambda row:
                    len([x for x in row.matchid_name_match.split(" ") if x in row.hit_matchid_name_match.split(" ")])*1.0 /max(1,min(len(row.matchid_name_match.split(" ")),len(row.hit_matchid_name_match.split(" "))))
                    ,axis = 1)
            ).round(2)
      - exec: >
          df['matchid_hit_score_name'] = np.where(
            df['matchid_name_match'] == df['hit_matchid_name_match'],
            1,
            np.where(df.matchid_hit_score_name_lv > 0.8 * df.matchid_hit_score_name_lv_inv,
              np.sqrt(df.matchid_hit_score_name_lv),
              0.9 * df[['matchid_hit_score_name_lv_inv','matchid_hit_score_name_tokens']].values.max(1)
              )
            ).round(2)
      - exec: >
          df = df[(df.matchid_hit_score_name * df.matchid_hit_score_date) > 0.4]
